#include "NXCDefs.h"

//float AngleCalculate(float x, float y);
//float HypotenuseCalculate(float x, float y);
void aimRobot(float distance, float angle);
float findMotorDegrees(float angle);
void driveStraight(float distance);
int findNearestWall(void);

int find_distance_on;


task main()
{

    int address_1[2] = {1, 250};
    int address_2[2] = {1, -250};
    int address_3[2] = {0, 250};
    int address_4[2] = {0, -250};

    int distanceToWall;

    float pytagoras_vinkel_avstand[2];
    int currentAddress[2];

    switch(1) // H채r l채gger vi input
    {
             for(int i = 0; i < 2; i++){
                 case 1:
                 currentAddress[i] = address_1[i];
                 break;
                 case 2:
                 currentAddress[i] = address_2[i];
                 break;
                 case 3:
                 currentAddress[i] = address_3[i];
                 break;
                 case 4:
                 currentAddress[i] = address_4[i];
                 break;
             }
    }


    // Activating sensor on port 1
    SetSensorLowspeed(IN_1);
    distanceToWall = findNearestWall();
    //pytagoras_vinkel_avstand[0] = AngleCalculate(aktuellAdress[1], distanceToWall);
    //pytagoras_vinkel_avstand[1] = HypotenuseCalculate(aktuellAdress[1], distanceToWall);
    aimRobot(280, 79);
    driveStraight(4000);
    //driveStraight(pytagoras_vinkel_avstand[1]);
}

int findNearestWall(void){
    int currentDistance;
    int shortestDistance;
    float motorDegrees = findMotorDegrees(10);

    OnFwd(OUT_B, 40);
    while (SensorUS(IN_1)<60);
    while (SensorUS(IN_1)>60);
    Off(OUT_B);
    currentDistance = SensorUS(IN_1);
    shortestDistance = currentDistance;
    do {
      shortestDistance = currentDistance;
      NumOut(0,0,currentDistance);
      RotateMotor(OUT_B, 30, motorDegrees);
      Off(OUT_B);
      currentDistance = SensorUS(IN_1);
    }while (shortestDistance>=currentDistance);

    RotateMotor(OUT_B, -30, (motorDegrees*3));
    return shortestDistance;
}

/*
float AngleCalculate(float x, float y){
    return atand(y-15/x);
}

float HypotenuseCalculate(float x, float y)
{
    return sqrt(x*x+(y-15)*(y-15));
    float driveStraight(float distance){
    float wheelCircumference = 17.6; // pi*5.6
    float motorDegrees = (360*distance/wheelCircumference);
    return motorDegrees;
}
*/
void aimRobot(float distance, float angle){
    float motorDegrees = findMotorDegrees(angle);

     // To right
    if(distance > 0){

        RotateMotor(OUT_A, 75, (180-motorDegrees));

    // To left
    } else if (distance < 0){

        RotateMotor(OUT_B, 75, (180-motorDegrees));
    }
}


float findMotorDegrees(float angle){

     float wheelCircumference = 17.6;
     float piTrack = 53.4; // Distance between wheels times pi
     float circumferenceDistance = 2 * piTrack;
     float motorDegrees = angle * circumferenceDistance / wheelCircumference;
     return motorDegrees;

}
void driveStraight(float distance){
      OnFwdSync(OUT_AB, -75, 0);

      // Ers채tt 4000 med en funktion "avst책nd till tid" eller liknande
      Wait(distance);
}
